name: Node.js CI

on:
  push:
    branches:
      - develop

      
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

# build docker image , # push docker image to ecr 
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: test-sotaicg-platform-base
  ECS_SERVICE: test-sotaicg-platform-ecs-crawler
  ECS_CLUSTER: test-sotaicg-platform-ecs-crawler
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: "app"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::115228050885:role/github-ecr-role-trourest
        aws-region: us-east-1


    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: test-sotaicg-platform-base
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG  
    
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
